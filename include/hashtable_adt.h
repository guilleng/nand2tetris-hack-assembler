#ifndef HASHTABLE_ADT_H
#define HASHTABLE_ADT_H

/** @cond */
#include <stddef.h>
/** @endcond */

/**
 * @brief Typedef for a _generic_ client-defined hash function.
 *
 * The `HashFunction` type is used to define generic hash functions that treats
 * the parameter pointer as pointing to some data of a given size. 
 * This allows the client side to define a custom hash function that operates on 
 * data as a __region in memory__, whose size is determined by the second 
 * parameter.
 *
 * @note The implementation stores a copy of the keys when elements are 
 * inserted, so it's crucial to define the `HashFunction` function properly to
 * ensure correct key retrieval and hashing behavior.
 *
 * @param data Pointer to the data to be hashed, treated as a region in memory.
 * @param size The size of the data pointed to by data.
 * @return The hash value generated by the hash function.
 *
 */
typedef size_t HashFunction(const void*, size_t);

/** @cond */
typedef struct hash_table_type HashTableADT;
/** @endcond */

/**
 * @brief Creates a new hash table with the specified number of buckets and hash
 * function.
 *
 * Allocates memory for a new hash table with the given number of buckets.
 * The actual number of buckets used may _slightly differ_, as it will be 
 * adjusted to the nearest greater prime number.  The hash table will use the 
 * provided hash function for hashing keys.  The signature has to match the 
 * `HashFuntion` type.  
 *
 * If the memory allocation fails, the function sets `errno` to `ENOMEM` and
 * outputs the interpreted error message to `stderr`. If the `nbuckets` argument
 * passed is zero or the hash function pointer (`fp`) passed is NULL, `errno` is
 * set to `EINVAL`, and the function returns `NULL`.
 *
 * @param nbuckets The number of buckets to allocate for the hash table.  An
 *                 unsigned integer greater than zero.
 *
 * @param fp       The hash function used for hashing keys.  The function's type
 *                 has to be explicitly `HashFunction`.
 *
 * @return A pointer to the newly created HashTableADT structure if successful,
 *         or `NULL` on failure.
 */
HashTableADT *
cadthashtable_new(size_t nbuckets, HashFunction *fp);

/**
 * @brief Deallocates a `HashTableADT` object.
 *
 * @note Client-side is responsible for deallocating the memory in-use by all 
 *       elements of in `q`.  
 *
 * @param ht Pointer to the `HashTableADT` object to be deallocated.
 */
void 
cadthashtable_destroy(HashTableADT *ht);

/**
 * @brief Inserts a new key-value pair into the hash table.
 *
 * The `cadthashtable_insert` function adds a new key-value pair to the hash
 * table `ht`. The `key` and its size `key_size` are used to uniquely identify 
 * the element to be inserted. The provided element `e` is associated with the 
 * specified key and stored in the hash table.
 *
 * If the `ht` pointer is `NULL`, the `key` pointer is `NULL`, the `key_size` is
 * zero, or the `e` element is `NULL`, the function returns `NULL` and sets
 * `errno` to `EINVAL`.
 *
 * If the specified key already exists in the hash table, the function sets
 * errno to `EEXIST` and returns `NULL` without modifying the hash table. 
 *
 * If memory allocation fails during the insertion process, the function outputs
 * an error message to `stderr`, sets `errno` to `ENOMEM` and returns `NULL`.
 *
 * @param ht      Pointer to the `HashTableADT` object.
 * @param key     Pointer to the key to be inserted into the hash table.
 * @param key_size The size of the key data pointed to by `key`.
 * @param e       The element to be associated with the specified key and
 *                inserted into the hash table.
 *
 * @return The inserted element `e` if the operation is successful, or `NULL` on
 *         failure.
 *
 */
void *
cadthashtable_insert(HashTableADT *ht, const void *key, size_t key_size, 
                     void *e);

/**
 * @brief Looks up and returns the element associated with the specified key.
 *
 * The `cadthashtable_lookup` function is used to search for an element
 * associated with the given `key` in the `ht`.  The size of the key data is
 * provided by the `key_size` parameter.
 *
 * If the `ht` pointer is `NULL`, the `key` pointer is `NULL`, or the `key_size`
 * is zero, the function returns `NULL` and sets `errno` to `EINVAL`.
 *
 * If the specified `key` is not found in the hash table, the function returns
 * `NULL`.
 *
 * If the specified `key` is found in the hash table, the function returns the
 * element associated with that key, without removing it from the hash table.
 *
 * @param ht      Pointer to the `HashTableADT` object.
 * @param key     Pointer to the key to be looked up in the hash table.
 * @param key_size The size of the key data pointed to by `key`.
 *
 * @return The element associated with the specified `key`, if found, or `NULL`
 *         if the `key` is not found or an error occurs during the lookup.
 */
void *
cadthashtable_lookup(HashTableADT *ht, const void *key, size_t key_size);

/**
 * @brief Removes an entry from the hash table and returns the associated
 *        element.
 *
 * The `cadthashtable_delete` function is used to remove an entry from the hash
 * table `ht` based on the specified `key`.  The size of the key data is
 * provided by the `key_size` parameter. The associated element `e` is returned
 * on success.
 *
 * If the `ht` pointer is `NULL`, the `key` pointer is `NULL`, the `key_size` is
 * zero, or the `e` element is `NULL`, the function returns `NULL` and sets
 * `errno` to `EINVAL`.
 *
 * If the specified `key` is not found in the hash table, the function returns
 * `NULL`.
 *
 * If the specified `key` is found in the hash table, the corresponding entry is
 * removed, and the associated element is returned. 
 * 
 * @note Client-side is responsible for deallocating the memory in-use by all 
 *       elements of in `ht`.  
 *
 * @param ht      Pointer to the `HashTableADT` object.
 * @param key     Pointer to the key whose associated entry is to be removed
 *                from the hash table.
 * @param key_size The size of the key data pointed to by `key`.
 * @param e       The element to be returned on successful deletion of the
 *                entry.
 *
 * @return The element associated with the deleted entry if the operation is
 *         successful, or `NULL` if the `key` is not found or an error occurs
 *         during the deletion.
 *
 */
void *
cadthashtable_delete(HashTableADT *ht, void *key, size_t key_size, void *e);

#endif

/**
 * @file hashtable_adt.h
 *
 * An opaque data structure that represents a hash table.  It should only be
 * accessed through the `cadthashtable_` functions.  
 *
 * @code{.c}
 * struct queue_type HashTableADT
 * {
 *      // No available fields
 * }
 * @endcode
 *
 * @note To view the HTML rendered version of the C code for the implementation 
 * of this module, please visit: 
 * <a href="hashtable_adt_8c-example.html">hashtable_adt.c</a>.
 *
 * ---
 *
 * ### Key Points
 *  + Relies on `void` pointers to allow manipulating elements of any type. See 
 *    @ref data_types.h.
 *  + Uses `errno` to manage errors.
 *  + Dynamically allocated, fixed size. 
 *
 * ### Considerations
 *  + Clients are responsible for managing the memory space of the objects 
 *    loaded to the structure.  
 *  + No type safety.
 *
 * ### Future Improvements
 *  + Implement resizing according to load factor.
 *
 */
